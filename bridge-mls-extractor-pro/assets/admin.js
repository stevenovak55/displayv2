/**
 * Bridge MLS Extractor Pro - Admin JavaScript
 * Version: 1.1 (Live Extraction Progress)
 */

(function($) {
    'use strict';

    const BME = {
        liveProgressInterval: null,
        currentExtractionId: null,

        /**
         * Initialize admin functionality
         */
        init: function() {
            this.bindEvents();
            this.initComponents();
            this.loadAsyncStats();
            this.initDatabaseBrowser();
            this.initLiveProgressDisplay(); // New: Initialize live progress
        },

        /**
         * Bind event handlers
         */
        bindEvents: function() {
            // Confirmation dialogs
            $(document).on('click', '.bme-confirm-clear', this.confirmClear);
            $(document).on('click', '.bme-confirm-resync', this.confirmResync);

            // Filter interactions
            $(document).on('change', '.bme-filter-select', this.handleFilterChange);
            $(document).on('click', '#bme-advanced-filters', this.toggleAdvancedFilters);

            // AJAX actions
            $(document).on('click', '.bme-load-stats', this.loadExtractionStats);
            $(document).on('submit', '#bme-listings-filter', this.handleFilterSubmit);

            // Real-time updates (already set up, but now also for live progress)
            this.setupRealTimeUpdates();

            // New: Handle Run/Resync button clicks to start live progress polling
            $(document).on('click', '#bme-run-extraction-button, #bme-resync-extraction-button', this.handleRunButtonClick);
        },

        /**
         * Initialize components
         */
        initComponents: function() {
            // Initialize Select2 dropdowns
            if ($.fn.select2) {
                $('.bme-filter-select').select2({
                    allowClear: true,
                    placeholder: function() {
                        return $(this).data('placeholder') || 'Select...';
                    }
                });
            }

            // Initialize tooltips
            if ($.fn.tooltip) {
                $('[data-tooltip]').tooltip();
            }

            // Initialize date pickers
            if ($.fn.datepicker) {
                $('.bme-date-picker').datepicker({
                    dateFormat: 'yy-mm-dd'
                });
            }
        },

        /**
         * Initializes the live search for the database browser.
         */
        initDatabaseBrowser: function() {
            // CORRECTED: The ID generated by WP's search_box() is [base-id]-search-input
            const searchInput = $('#bme-listing-search-search-input');
            const filterForm = searchInput.closest('form');

            if (!searchInput.length || typeof $.fn.autocomplete === 'undefined') {
                return;
            }

            searchInput.autocomplete({
                source: function(request, response) {
                    $.post(bmeAdmin.ajaxUrl, {
                        action: 'bme_live_search',
                        nonce: bmeAdmin.nonce,
                        term: request.term
                    }, function(res) {
                        if (res.success) {
                            response(res.data);
                        } else {
                            response([]);
                        }
                    });
                },
                minLength: 3,
                select: function(event, ui) {
                    event.preventDefault();
                    // Set the search box value to the raw value (e.g., MLS# or Address)
                    searchInput.val(ui.item.value);
                    // Submit the form to apply the filter
                    filterForm.submit();
                },
                focus: function(event, ui) {
                    // When focusing on an item, show its raw value in the box
                    event.preventDefault();
                    searchInput.val(ui.item.value);
                }
            }).autocomplete("instance")._renderItem = function(ul, item) {
                // Custom display for each suggestion item
                return $("<li>")
                    .append("<div>" + item.label + "</div>")
                    .appendTo(ul);
            };
        },

        /**
         * Load asynchronous statistics
         */
        loadAsyncStats: function() {
            $('.bme-loading[data-extraction-id]').each(function() {
                const $element = $(this);
                const extractionId = $element.data('extraction-id');

                BME.loadExtractionStatsById(extractionId, function(stats) {
                    if (stats && stats.total_listings !== undefined) {
                        // Use .text() to prevent XSS when inserting dynamic data
                        $element.text(BME.numberFormat(stats.total_listings));
                        $element.removeClass('bme-loading');
                    }
                });
            });
        },

        /**
         * Setup real-time updates for running extractions (e.g., for list table, and now live progress)
         */
        setupRealTimeUpdates: function() {
            // Check for running extractions every 30 seconds
            setInterval(function() {
                BME.checkRunningExtractions();
            }, 30000); // This is for the list table, not the live progress box
        },

        /**
         * Confirm clear data action
         */
        confirmClear: function(e) {
            if (!confirm(bmeAdmin.strings.confirmClear)) {
                e.preventDefault();
                return false;
            }
        },

        /**
         * Confirm resync action
         */
        confirmResync: function(e) {
            if (!confirm(bmeAdmin.strings.confirmResync)) {
                e.preventDefault();
                return false;
            }
        },

        /**
         * Handle filter changes
         */
        handleFilterChange: function() {
            const $form = $(this).closest('form');

            // Auto-submit if configured
            if ($form.data('auto-submit')) {
                $form.submit();
            }
        },

        /**
         * Toggle advanced filters
         */
        toggleAdvancedFilters: function(e) {
            e.preventDefault();

            const $button = $(this);
            const $panel = $('#bme-advanced-panel');

            $panel.slideToggle(function() {
                const isVisible = $panel.is(':visible');
                $button.text(isVisible ? 'Hide Advanced' : 'Advanced Filters');
            });
        },

        /**
         * Handle filter form submission
         */
        handleFilterSubmit: function(e) {
            const $form = $(this);
            const $submitBtn = $form.find('[type="submit"]');

            // Show loading state
            $submitBtn.prop('disabled', true).text(bmeAdmin.strings.loading);

            // Allow normal form submission
            // Loading state will be reset on page load
        },

        /**
         * Load extraction statistics
         */
        loadExtractionStats: function(e) {
            e.preventDefault();

            const $button = $(this);
            const extractionId = $button.data('extraction-id');

            BME.loadExtractionStatsById(extractionId, function(stats) {
                BME.displayStatsModal(stats);
            });
        },

        /**
         * Load extraction statistics by ID
         */
        loadExtractionStatsById: function(extractionId, callback) {
            $.post(bmeAdmin.ajaxUrl, {
                action: 'bme_get_extraction_stats',
                extraction_id: extractionId,
                nonce: bmeAdmin.nonce
            }, function(response) {
                if (response.success) {
                    callback(response.data);
                } else {
                    console.error('Failed to load stats:', response.data);
                    BME.showNotification(bmeAdmin.strings.error, 'error');
                }
            }).fail(function() {
                console.error('AJAX request failed');
                BME.showNotification(bmeAdmin.strings.error, 'error');
            });
        },

        /**
         * Display statistics modal
         */
        displayStatsModal: function(stats) {
            // Create modal HTML
            const modalHtml = BME.buildStatsModalHtml(stats);

            // Show modal (using WordPress admin styles)
            const $modal = $(modalHtml).appendTo('body');
            $modal.show();

            // Bind close events
            $modal.on('click', '.bme-modal-close, .bme-modal-overlay', function() {
                $modal.fadeOut(function() {
                    $modal.remove();
                });
            });

            // Prevent modal content clicks from closing
            $modal.on('click', '.bme-modal-content', function(e) {
                e.stopPropagation();
            });
        },

        /**
         * Build statistics modal HTML
         * Note: For security, ensure all dynamic content is properly escaped.
         * For numeric values, BME.numberFormat already handles them.
         * For string values like dates, BME.formatDate is used.
         * If any raw string data from the API were to be displayed, it should be escaped.
         */
        buildStatsModalHtml: function(stats) {
            // Helper to safely escape HTML for string values
            const escapeHtml = (text) => {
                const map = {
                    '&': '&amp;',
                    '<': '&lt;',
                    '>': '&gt;',
                    '"': '&quot;',
                    "'": '&#039;'
                };
                return text.replace(/[&<>"']/g, function(m) { return map[m]; });
            };

            return `
                <div class="bme-modal-overlay" style="position: fixed; top: 0; left: 0; right: 0; bottom: 0; background: rgba(0,0,0,0.5); z-index: 100000; display: flex; align-items: center; justify-content: center;">
                    <div class="bme-modal-content" style="background: white; padding: 20px; border-radius: 4px; max-width: 500px; width: 90%; max-height: 80vh; overflow-y: auto;">
                        <div class="bme-modal-header" style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px; border-bottom: 1px solid #ddd; padding-bottom: 10px;">
                            <h2 style="margin: 0;">Extraction Statistics</h2>
                            <button class="bme-modal-close" style="background: none; border: none; font-size: 20px; cursor: pointer;">&times;</button>
                        </div>
                        <div class="bme-modal-body">
                            <div class="bme-stats-grid">
                                <div class="bme-stat-item">
                                    <div class="bme-stat-value">${BME.numberFormat(stats.total_listings || 0)}</div>
                                    <div class="bme-stat-label">Total Listings</div>
                                </div>
                                <div class="bme-stat-item">
                                    <div class="bme-stat-value">${BME.numberFormat(stats.unique_statuses || 0)}</div>
                                    <div class="bme-stat-label">Unique Statuses</div>
                                </div>
                                <div class="bme-stat-item">
                                    <div class="bme-stat-value">$${BME.numberFormat(stats.avg_price || 0)}</div>
                                    <div class="bme-stat-label">Average Price</div>
                                </div>
                                <div class="bme-stat-item">
                                    <div class="bme-stat-value">$${BME.numberFormat(stats.min_price || 0)}</div>
                                    <div class="bme-stat-label">Min Price</div>
                                </div>
                                <div class="bme-stat-item">
                                    <div class="bme-stat-value">$${BME.numberFormat(stats.max_price || 0)}</div>
                                    <div class="bme-stat-label">Max Price</div>
                                </div>
                            </div>
                            ${stats.oldest_listing ? `
                                <p><strong>Oldest Listing:</strong> ${escapeHtml(BME.formatDate(stats.oldest_listing))}</p>
                            ` : ''}
                            ${stats.newest_update ? `
                                <p><strong>Latest Update:</strong> ${escapeHtml(BME.formatDate(stats.newest_update))}</p>
                            ` : ''}
                        </div>
                    </div>
                </div>
            `;
        },

        /**
         * Check for running extractions (for list table)
         */
        checkRunningExtractions: function() {
            // This would typically check for extraction status updates
            // For now, we'll just update timestamps
            $('.bme-last-run small').each(function() {
                const $element = $(this);
                const text = $element.text();

                // Update relative timestamps
                if (text.includes('ago')) {
                    // Would need server data to properly update this
                    // For a true real-time update, an AJAX call to get fresh data
                    // for each relevant extraction would be needed here.
                    // Example: BME.loadExtractionStatsById(extractionId, function(stats) { /* update UI */ });
                }
            });
        },

        /**
         * New: Initialize Live Progress Display
         */
        initLiveProgressDisplay: function() {
            const $container = $('#bme-live-progress-container');
            if (!$container.length) return;

            BME.currentExtractionId = $container.data('extraction-id');
            const initialState = window.bmeLiveProgressInitialState;

            if (initialState && initialState.status === 'running') {
                BME.startLiveProgressPolling(initialState);
            } else {
                $('#bme-live-progress-content').hide();
                $('#bme-live-progress-not-running').show();
            }
        },

        /**
         * New: Handle click on Run/Resync buttons to start polling
         */
        handleRunButtonClick: function(e) {
            const $button = $(this);
            const extractionId = $button.data('extraction-id');

            // Only start polling if we're on the edit screen for this extraction
            if (BME.currentExtractionId && BME.currentExtractionId == extractionId) {
                // Show the live progress section immediately
                $('#bme-live-progress-not-running').hide();
                $('#bme-live-progress-content').show();
                $('#bme-live-status').text('Starting...');
                $('#bme-live-processed').text('0');
                $('#bme-live-current-listing').text('N/A');
                $('#bme-live-last-updated').text('N/A');
                $('#bme-live-duration').text('0s');
                $('#bme-live-property-types').html('');
                $('#bme-live-message').text('Request sent to start extraction...');
                $('#bme-live-error-message').text('');

                // Start polling after a short delay to allow server to initialize
                setTimeout(() => {
                    BME.startLiveProgressPolling();
                }, 1000);
            }
        },

        /**
         * New: Start polling for live extraction progress.
         * @param {object} [initialState] Optional initial state to render immediately.
         */
        startLiveProgressPolling: function(initialState = null) {
            if (!BME.currentExtractionId) return;

            if (BME.liveProgressInterval) {
                clearInterval(BME.liveProgressInterval);
            }

            if (initialState) {
                BME.updateLiveProgressDisplay(initialState);
            }

            BME.liveProgressInterval = setInterval(() => {
                BME.fetchLiveProgress();
            }, 5000); // Poll every 5 seconds
        },

        /**
         * New: Fetch live progress via AJAX.
         */
        fetchLiveProgress: function() {
            $.post(bmeAdmin.ajaxUrl, {
                action: 'bme_get_live_extraction_progress',
                extraction_id: BME.currentExtractionId,
                nonce: bmeAdmin.nonce
            }, function(response) {
                if (response.success && response.data) {
                    BME.updateLiveProgressDisplay(response.data);
                    if (response.data.status !== 'running') {
                        clearInterval(BME.liveProgressInterval);
                        BME.liveProgressInterval = null;
                        // Reload the page after a short delay to show final stats and clear transient
                        setTimeout(() => {
                            window.location.reload();
                        }, 2000);
                    }
                } else {
                    // If no data or error, assume not running or finished
                    clearInterval(BME.liveProgressInterval);
                    BME.liveProgressInterval = null;
                    $('#bme-live-progress-content').hide();
                    $('#bme-live-progress-not-running').show();
                }
            }).fail(function() {
                console.error('AJAX request for live progress failed.');
                clearInterval(BME.liveProgressInterval);
                BME.liveProgressInterval = null;
                $('#bme-live-progress-content').hide();
                $('#bme-live-progress-not-running').show();
            });
        },

        /**
         * New: Update the live progress display in the meta box.
         * @param {object} data The live progress data.
         */
        updateLiveProgressDisplay: function(data) {
            $('#bme-live-progress-content').show();
            $('#bme-live-progress-not-running').hide();

            $('#bme-live-status').text(data.status || 'Unknown');
            $('#bme-live-processed').text(BME.numberFormat(data.total_processed_current_run || 0));
            $('#bme-live-current-listing').text(data.current_listing_mls_id ? `${data.current_listing_mls_id} (${data.current_listing_address || 'N/A'})` : 'N/A');
            $('#bme-live-last-updated').text(data.last_update_timestamp ? BME.formatTimeAgo(data.last_update_timestamp) : 'N/A');

            if (data.extraction_start_time && data.status === 'running') {
                const elapsedSeconds = Math.floor(Date.now() / 1000) - Math.floor(data.extraction_start_time);
                $('#bme-live-duration').text(BME.formatDuration(elapsedSeconds));
            } else if (data.extraction_start_time && data.status !== 'running') {
                // If finished, calculate total duration from start to last update or current time
                const actualEndTime = data.last_update_timestamp || (Date.now() / 1000);
                const finalDuration = Math.floor(actualEndTime) - Math.floor(data.extraction_start_time);
                $('#bme-live-duration').text(BME.formatDuration(finalDuration));
            } else {
                $('#bme-live-duration').text('N/A');
            }


            $('#bme-live-message').text(data.last_message || '');
            $('#bme-live-error-message').text(data.error_message || '');

            // Display Property SubType counts
            const propertyTypesHtml = Object.entries(data.property_subtype_counts || {})
                .map(([type, count]) => `${escapeHtml(type)}: ${BME.numberFormat(count)}`)
                .join(', ');
            $('#bme-live-property-types').html(propertyTypesHtml || 'N/A');
        },

        /**
         * Search listings with AJAX
         */
        searchListings: function(filters, page) {
            return $.post(bmeAdmin.ajaxUrl, {
                action: 'bme_search_listings',
                filters: filters,
                page: page || 1,
                nonce: bmeAdmin.nonce
            });
        },

        /**
         * Get filter values with AJAX
         */
        getFilterValues: function(field) {
            return $.post(bmeAdmin.ajaxUrl, {
                action: 'bme_get_filter_values',
                field: field,
                nonce: bmeAdmin.nonce
            });
        },

        /**
         * Utility function to format numbers
         */
        numberFormat: function(number) {
            return new Intl.NumberFormat().format(number);
        },

        /**
         * Utility function to format dates
         */
        formatDate: function(dateString) {
            const date = new Date(dateString);
            // Ensure date is valid before formatting
            if (isNaN(date.getTime())) {
                return 'Invalid Date';
            }
            return date.toLocaleDateString() + ' ' + date.toLocaleTimeString();
        },

        /**
         * New: Utility function to format time ago (for last updated)
         */
        formatTimeAgo: function(timestamp) {
            const seconds = Math.floor(Date.now() / 1000) - timestamp;
            if (seconds < 60) return `${seconds}s ago`;
            const minutes = Math.floor(seconds / 60);
            if (minutes < 60) return `${minutes}m ago`;
            const hours = Math.floor(minutes / 60);
            if (hours < 24) return `${hours}h ago`;
            const days = Math.floor(hours / 24);
            return `${days}d ago`;
        },

        /**
         * New: Utility function to format duration (seconds to HH:MM:SS)
         */
        formatDuration: function(totalSeconds) {
            const hours = Math.floor(totalSeconds / 3600);
            totalSeconds %= 3600;
            const minutes = Math.floor(totalSeconds / 60);
            const seconds = totalSeconds % 60;

            const pad = (num) => num.toString().padStart(2, '0');

            if (hours > 0) {
                return `${hours}h ${pad(minutes)}m ${pad(seconds)}s`;
            } else if (minutes > 0) {
                return `${minutes}m ${pad(seconds)}s`;
            } else {
                return `${seconds}s`;
            }
        },

        /**
         * Show notification
         */
        showNotification: function(message, type) {
            type = type || 'info';

            const $notice = $(`
                <div class="notice notice-${type} is-dismissible bme-notice">
                    <p>${message}</p>
                </div>
            `);

            $('.wrap h1').after($notice);

            // Auto-dismiss after 5 seconds
            setTimeout(function() {
                $notice.fadeOut(function() {
                    $notice.remove();
                });
            }, 5000);
        },

        /**
         * Show loading overlay
         */
        showLoading: function($element) {
            $element.addClass('bme-loading-overlay');
        },

        /**
         * Hide loading overlay
         */
        hideLoading: function($element) {
            $element.removeClass('bme-loading-overlay');
        },

        /**
         * Debounce function for search inputs
         */
        debounce: function(func, wait) {
            let timeout;
            return function executedFunction(...args) {
                const later = function() {
                    clearTimeout(timeout);
                    func(...args);
                };
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
            };
        }
    };

    // Initialize when document is ready
    $(document).ready(function() {
        BME.init();
    });

    // Make BME object globally available
    window.BME = BME;

})(jQuery);